{"ast":null,"code":"import axios from 'axios';\n/*\r\n    /api/compound/info\r\n    Returns general data about COMP token\r\n    and market volumes\r\n*/\n\nexport default ((req, res) => {\n  return new Promise(resolve => {\n    // Pull COMP price\n    axios.get(\"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=compound-governance-token\").then(cg => {\n      // PUll COMP dispensed info\n      axios.get(\"https://api.compound.finance/api/v2/governance/comp?network=mainnet\").then(comp => {\n        // Pull COMP exchange volumes\n        axios.get(\"https://api.coingecko.com/api/v3/coins/compound-governance-token/tickers?include_exchange_logo=true\").then(cgtickers => {\n          let tickers = cgtickers.data.tickers; // Collect exchanges\n\n          let sorted = tickers.sort(function (a, b) {\n            return b.converted_volume.usd - a.converted_volume.usd;\n          }); // Sort exchanges by volume\n\n          let cleaned = []; // Setup cleaned array\n\n          let total_volume = 0; // Setup total volume value\n          // Loop through exchanges\n\n          for (let i = 0; i < sorted.length; i++) {\n            // Select only exchanges with green trust score\n            if (sorted[i].trust_score === 'green') {\n              cleaned.push(sorted[i]); // Push exchange info to cleaned array\n\n              total_volume += sorted[i].converted_volume.usd; // Increment total volume\n            }\n          } // Return response JSON object\n\n\n          let response = {\n            \"current_price\": cg.data[0].current_price,\n            \"total_supply\": cg.data[0].total_supply,\n            \"total_comp_distributed\": parseInt(comp.data.total_comp_allocated),\n            \"total_volume\": total_volume,\n            \"tickers\": cleaned\n          };\n          res.send(response);\n          res.status(200).end();\n          resolve();\n        });\n      });\n    });\n  });\n});","map":{"version":3,"sources":["C:/Users/furso/Desktop/stat.farm/pages/api/compound/info.js"],"names":["axios","req","res","Promise","resolve","get","then","cg","comp","cgtickers","tickers","data","sorted","sort","a","b","converted_volume","usd","cleaned","total_volume","i","length","trust_score","push","response","current_price","total_supply","parseInt","total_comp_allocated","send","status","end"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;AACA;;AAEA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzB,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC1B;AACAJ,IAAAA,KAAK,CAACK,GAAN,CAAU,8FAAV,EAA0GC,IAA1G,CAA+GC,EAAE,IAAI;AACjH;AACAP,MAAAA,KAAK,CAACK,GAAN,CAAU,qEAAV,EAAiFC,IAAjF,CAAsFE,IAAI,IAAI;AAC1F;AACAR,QAAAA,KAAK,CAACK,GAAN,CAAU,qGAAV,EAAiHC,IAAjH,CAAsHG,SAAS,IAAI;AAC/H,cAAIC,OAAO,GAAGD,SAAS,CAACE,IAAV,CAAeD,OAA7B,CAD+H,CACzF;;AACtC,cAAIE,MAAM,GAAGF,OAAO,CAACG,IAAR,CAAa,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAAC,mBAAOA,CAAC,CAACC,gBAAF,CAAmBC,GAAnB,GAAyBH,CAAC,CAACE,gBAAF,CAAmBC,GAAnD;AAAuD,WAApF,CAAb,CAF+H,CAE3B;;AACpG,cAAIC,OAAO,GAAG,EAAd,CAH+H,CAG7G;;AAClB,cAAIC,YAAY,GAAG,CAAnB,CAJ+H,CAIzG;AAEtB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,MAAM,CAACS,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC;AACA,gBAAIR,MAAM,CAACQ,CAAD,CAAN,CAAUE,WAAV,KAA0B,OAA9B,EAAuC;AACnCJ,cAAAA,OAAO,CAACK,IAAR,CAAaX,MAAM,CAACQ,CAAD,CAAnB,EADmC,CACV;;AACzBD,cAAAA,YAAY,IAAIP,MAAM,CAACQ,CAAD,CAAN,CAAUJ,gBAAV,CAA2BC,GAA3C,CAFmC,CAEa;AACnD;AACJ,WAb8H,CAe/H;;;AACA,cAAIO,QAAQ,GAAG;AACX,6BAAiBjB,EAAE,CAACI,IAAH,CAAQ,CAAR,EAAWc,aADjB;AAEX,4BAAgBlB,EAAE,CAACI,IAAH,CAAQ,CAAR,EAAWe,YAFhB;AAGX,sCAA0BC,QAAQ,CAACnB,IAAI,CAACG,IAAL,CAAUiB,oBAAX,CAHvB;AAIX,4BAAgBT,YAJL;AAKX,uBAAWD;AALA,WAAf;AAQAhB,UAAAA,GAAG,CAAC2B,IAAJ,CAASL,QAAT;AACAtB,UAAAA,GAAG,CAAC4B,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACA3B,UAAAA,OAAO;AACV,SA3BD;AA4BH,OA9BD;AA+BH,KAjCD;AAkCH,GApCM,CAAP;AAqCH,CAtCD","sourcesContent":["import axios from 'axios'\r\n\r\n/*\r\n    /api/compound/info\r\n    Returns general data about COMP token\r\n    and market volumes\r\n*/\r\n\r\nexport default (req, res) => {\r\n    return new Promise(resolve => {\r\n        // Pull COMP price\r\n        axios.get(\"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=compound-governance-token\").then(cg => {\r\n            // PUll COMP dispensed info\r\n            axios.get(\"https://api.compound.finance/api/v2/governance/comp?network=mainnet\").then(comp => {\r\n                // Pull COMP exchange volumes\r\n                axios.get(\"https://api.coingecko.com/api/v3/coins/compound-governance-token/tickers?include_exchange_logo=true\").then(cgtickers => {\r\n                    let tickers = cgtickers.data.tickers; // Collect exchanges\r\n                    let sorted = tickers.sort(function(a, b) {return b.converted_volume.usd - a.converted_volume.usd}); // Sort exchanges by volume\r\n                    let cleaned = []; // Setup cleaned array\r\n                    let total_volume = 0; // Setup total volume value\r\n\r\n                    // Loop through exchanges\r\n                    for (let i = 0; i < sorted.length; i++) {\r\n                        // Select only exchanges with green trust score\r\n                        if (sorted[i].trust_score === 'green') {\r\n                            cleaned.push(sorted[i]); // Push exchange info to cleaned array\r\n                            total_volume += sorted[i].converted_volume.usd; // Increment total volume\r\n                        }\r\n                    }\r\n\r\n                    // Return response JSON object\r\n                    let response = {\r\n                        \"current_price\": cg.data[0].current_price,\r\n                        \"total_supply\": cg.data[0].total_supply,\r\n                        \"total_comp_distributed\": parseInt(comp.data.total_comp_allocated),\r\n                        \"total_volume\": total_volume,\r\n                        \"tickers\": cleaned,\r\n                    }\r\n\r\n                    res.send(response);\r\n                    res.status(200).end();\r\n                    resolve();\r\n                })\r\n            })\r\n        })\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
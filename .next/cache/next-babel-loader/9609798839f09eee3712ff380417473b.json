{"ast":null,"code":"import axios from 'axios';\n/*\r\n    /api/compound/markets\r\n    Returns data about compound finance pools\r\n    including token data for today and historic\r\n*/\n\nexport default (function (req, res) {\n  return new Promise(function (resolve) {\n    // Get Compound Market data\n    axios.get(\"https://api.compound.finance/api/v2/ctoken?meta=true&network=mainnet\").then(function (ctokens) {\n      // Get historic Compound Market data (to calculate 24H change)\n      axios.get(\"https://api.compound.finance/api/v2/ctoken?meta=false&block_timestamp=\".concat(parseInt(new Date().getTime() / 1000 - 86400), \"&network=mainnet\")).then(function (historic) {\n        // Get CoinGecko eth price data\n        axios.get(\"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\").then(function (eth) {\n          // Get CoinGecko COMP price and volume data\n          axios.get(\"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=compound-governance-token\").then(function (comp) {\n            var tokens = ctokens.data.cToken; // Setup current token info\n\n            var historic_tokens = historic.data.cToken; // Setup historic token info\n\n            var eth_price = eth.data.ethereum.usd; // Setup eth price\n\n            var data = []; // Container for token data\n            // General statistics to calculate:\n\n            var total_supply = 0;\n            var total_borrow = 0;\n            var earned_interest = 0;\n            var paid_interest = 0; // Setup token items from Compound data:\n\n            tokens.forEach(function (token) {\n              // Collect required stats for front-end\n              var tokenItem = {\n                \"image\": \"https://compound.finance/images/asset_\".concat(token.underlying_symbol === 'WBTC' ? 'BTC' : token.underlying_symbol, \".svg\"),\n                \"name\": token.name === 'Compound USDT' ? \"Tether\" : token.name.slice(9),\n                \"symbol\": token.symbol.slice(1),\n                \"borrow_apy\": (token.borrow_rate.value * 100).toFixed(2),\n                \"supply_apy\": (token.supply_rate.value * 100).toFixed(2),\n                \"gross_supply\": parseFloat(token.total_supply.value) * (parseFloat(token.exchange_rate.value) * parseFloat(token.underlying_price.value) * eth_price),\n                \"gross_borrow\": parseFloat(token.total_borrows.value) * (parseFloat(token.underlying_price.value) * eth_price)\n              }; // Increment total supply and borrow calculations\n\n              total_supply += tokenItem.gross_supply;\n              total_borrow += tokenItem.gross_borrow; // Calculate earned_interest for tokens with >0APY\n\n              if (token.supply_rate.value > 0) {\n                earned_interest += tokenItem.gross_supply * token.supply_rate.value;\n              }\n\n              if (token.borrow_rate.value > 0) {\n                paid_interest += tokenItem.gross_borrow * token.borrow_rate.value;\n              } // Use historic compound data to calculate change in apy/supply/borrow\n\n\n              historic_tokens.forEach(function (historicToken) {\n                if (token.name === historicToken.name) {\n                  tokenItem.supply_apy_change = parseFloat(token.supply_rate.value) * 100 - parseFloat(historicToken.supply_rate.value) * 100;\n                  tokenItem.borrow_apy_change = parseFloat(token.borrow_rate.value) * 100 - parseFloat(historicToken.borrow_rate.value) * 100;\n                  tokenItem.gross_supply_change = (tokenItem.gross_supply - parseFloat(historicToken.total_supply.value) * (parseFloat(historicToken.exchange_rate.value) * parseFloat(historicToken.underlying_price.value) * eth_price)) / tokenItem.gross_supply * 100;\n                  tokenItem.gross_borrow_change = (tokenItem.gross_borrow - parseFloat(historicToken.total_borrows.value) * (parseFloat(historicToken.underlying_price.value) * eth_price)) / tokenItem.gross_borrow * 100;\n                }\n              }); // Push token to data container\n\n              data.push(tokenItem);\n            }); // Sort tokens by gross market supply (largest first)\n\n            var sorted = data.sort(function (a, b) {\n              return b.gross_supply - a.gross_supply;\n            }); // Calculate yearly comp allocation per token\n\n            for (var i = 0; i < sorted.length; i++) {\n              var total_diff = sorted[i].gross_borrow / total_borrow * 421940;\n              sorted[i].comp_allocation = total_diff;\n            }\n\n            res.send({\n              tokens: sorted,\n              total_supply: total_supply,\n              total_borrow: total_borrow,\n              earned_interest: earned_interest,\n              paid_interest: paid_interest,\n              comp_price: comp.data[0].current_price\n            });\n            res.status(200).end();\n            resolve();\n          })[\"catch\"](function () {\n            res.status(405).end();\n            resolve();\n          });\n        });\n      });\n    });\n  });\n});","map":{"version":3,"sources":["C:/Users/furso/Desktop/stat.farm/components/Transaction.js"],"names":["axios","req","res","Promise","resolve","get","then","ctokens","parseInt","Date","getTime","historic","eth","comp","tokens","data","cToken","historic_tokens","eth_price","ethereum","usd","total_supply","total_borrow","earned_interest","paid_interest","forEach","token","tokenItem","underlying_symbol","name","slice","symbol","borrow_rate","value","toFixed","supply_rate","parseFloat","exchange_rate","underlying_price","total_borrows","gross_supply","gross_borrow","historicToken","supply_apy_change","borrow_apy_change","gross_supply_change","gross_borrow_change","push","sorted","sort","a","b","i","length","total_diff","comp_allocation","send","comp_price","current_price","status","end"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\n/*\r\n    /api/compound/markets\r\n    Returns data about compound finance pools\r\n    including token data for today and historic\r\n*/\r\n\r\nexport default (req, res) => {\r\n    return new Promise(resolve => {\r\n        // Get Compound Market data\r\n        axios.get(\"https://api.compound.finance/api/v2/ctoken?meta=true&network=mainnet\").then(ctokens => {\r\n            // Get historic Compound Market data (to calculate 24H change)\r\n            axios.get(`https://api.compound.finance/api/v2/ctoken?meta=false&block_timestamp=${parseInt((new Date().getTime() / 1000) - 86400)}&network=mainnet`).then(historic => {\r\n                // Get CoinGecko eth price data\r\n                axios.get(\"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\").then(eth => {\r\n                    // Get CoinGecko COMP price and volume data\r\n                    axios.get(\"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=compound-governance-token\").then(comp => {\r\n                        let tokens = ctokens.data.cToken; // Setup current token info\r\n                        let historic_tokens = historic.data.cToken; // Setup historic token info\r\n                        let eth_price = eth.data.ethereum.usd; // Setup eth price\r\n                        let data = []; // Container for token data\r\n\r\n                        // General statistics to calculate:\r\n                        let total_supply = 0;\r\n                        let total_borrow = 0;\r\n                        let earned_interest = 0;\r\n                        let paid_interest = 0;\r\n\r\n                        // Setup token items from Compound data:\r\n                        tokens.forEach(token => {\r\n                            // Collect required stats for front-end\r\n                            let tokenItem = {\r\n                                \"image\": `https://compound.finance/images/asset_${token.underlying_symbol === 'WBTC' ? 'BTC' : token.underlying_symbol}.svg`,\r\n                                \"name\": token.name === 'Compound USDT' ? \"Tether\" : token.name.slice(9),\r\n                                \"symbol\": token.symbol.slice(1),\r\n                                \"borrow_apy\": (token.borrow_rate.value * 100).toFixed(2),\r\n                                \"supply_apy\": (token.supply_rate.value * 100).toFixed(2),\r\n                                \"gross_supply\": parseFloat(token.total_supply.value) * ((parseFloat(token.exchange_rate.value) * parseFloat(token.underlying_price.value)) * eth_price),\r\n                                \"gross_borrow\": parseFloat(token.total_borrows.value) * (parseFloat(token.underlying_price.value) * eth_price)\r\n                            };\r\n\r\n                            // Increment total supply and borrow calculations\r\n                            total_supply += tokenItem.gross_supply;\r\n                            total_borrow += tokenItem.gross_borrow;\r\n\r\n                            // Calculate earned_interest for tokens with >0APY\r\n                            if (token.supply_rate.value > 0) {\r\n                                earned_interest += tokenItem.gross_supply * token.supply_rate.value;\r\n                            }\r\n                            if (token.borrow_rate.value > 0) {\r\n                                paid_interest += tokenItem.gross_borrow * token.borrow_rate.value;\r\n                            }\r\n\r\n                            // Use historic compound data to calculate change in apy/supply/borrow\r\n                            historic_tokens.forEach(historicToken => {\r\n                                if (token.name === historicToken.name) {\r\n                                    tokenItem.supply_apy_change = ((parseFloat(token.supply_rate.value) * 100) - (parseFloat(historicToken.supply_rate.value) * 100));\r\n                                    tokenItem.borrow_apy_change = ((parseFloat(token.borrow_rate.value) * 100) - (parseFloat(historicToken.borrow_rate.value) * 100));\r\n                                    tokenItem.gross_supply_change = ((tokenItem.gross_supply - (parseFloat(historicToken.total_supply.value) * ((parseFloat(historicToken.exchange_rate.value) * parseFloat(historicToken.underlying_price.value)) * eth_price))) / tokenItem.gross_supply) * 100;\r\n                                    tokenItem.gross_borrow_change = ((tokenItem.gross_borrow - (parseFloat(historicToken.total_borrows.value) * (parseFloat(historicToken.underlying_price.value) * eth_price))) / tokenItem.gross_borrow) * 100;\r\n                                }\r\n                            })\r\n\r\n                            // Push token to data container\r\n                            data.push(tokenItem);\r\n                        })\r\n\r\n                        // Sort tokens by gross market supply (largest first)\r\n                        let sorted = data.sort(function(a, b) {return b.gross_supply - a.gross_supply});\r\n\r\n                        // Calculate yearly comp allocation per token\r\n                        for (let i = 0; i < sorted.length; i++) {\r\n                            let total_diff = ((sorted[i].gross_borrow / total_borrow) * 421940);\r\n                            sorted[i].comp_allocation = total_diff;\r\n                        }\r\n\r\n                        res.send({\r\n                            tokens: sorted,\r\n                            total_supply,\r\n                            total_borrow,\r\n                            earned_interest,\r\n                            paid_interest,\r\n                            comp_price: comp.data[0].current_price\r\n                        });\r\n                        res.status(200).end();\r\n                        resolve();\r\n                    }).catch(() => {\r\n                        res.status(405).end();\r\n                        resolve();\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}